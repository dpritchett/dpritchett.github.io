<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>agile on dpritchett.net by Daniel Pritchett</title>
    <link>https://dpritchett.net/tags/agile/</link>
    <description>Recent content in agile on dpritchett.net by Daniel Pritchett</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[CC-BY](https://creativecommons.org/licenses/by/4.0/)</copyright>
    <lastBuildDate>Sun, 21 Oct 2018 14:43:18 -0500</lastBuildDate>
    
	<atom:link href="https://dpritchett.net/tags/agile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Revisiting the Agile Manifesto in a Post-DevOps World</title>
      <link>https://dpritchett.net/posts/revisiting-agile-manifesto-post-devops-world/</link>
      <pubDate>Sun, 21 Oct 2018 14:43:18 -0500</pubDate>
      
      <guid>https://dpritchett.net/posts/revisiting-agile-manifesto-post-devops-world/</guid>
      <description>Agile in the age of serverless, &amp;ldquo;cloud native&amp;rdquo;, and continuous delivery I&amp;rsquo;ve been reading through a bunch of lean manufacturing and DevOps literature recently, namely The Goal, The Phoenix Project (again!), and now Continuous Delivery. The Agile Manifesto is referred to a good bit in the latter two texts, and it&amp;rsquo;s gotten me wondering how well the seventeen-year old chestnuts hold up.
Taken as a whole, the manifesto feels timeless and every bit as relevant as it was at the dawn of this new century.</description>
    </item>
    
    <item>
      <title>The first rule of software projects</title>
      <link>https://dpritchett.net/posts/first-rule-of-software-projects/</link>
      <pubDate>Mon, 21 Nov 2016 12:30:17 -0600</pubDate>
      
      <guid>https://dpritchett.net/posts/first-rule-of-software-projects/</guid>
      <description>Years of building software have convinced me of one very important mantra:
 If we had to ship tomorrow, we could.
 I came by this one the hard way. Remember that software folks are notorious optimists. This is an imprecise discipline we work with. Your six week project might turn into a four month project for perfectly valid reasons. Teams can run out of people or money for various reasons.</description>
    </item>
    
  </channel>
</rss>